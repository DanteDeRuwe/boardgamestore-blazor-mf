@using System.Collections.Immutable
@using System.Reflection
@using Microsoft.Extensions.Logging
@inject FragmentMap FragmentMap


@RenderFragment


@code {

    [Parameter] public string Name { get; set; }

    [Parameter] public Dictionary<string, object> Attributes { get; set; } = new();

    private Type[] Components { get; set; } = null!;

    private RenderFragment RenderFragment => renderTreeBuilder =>
    {
        for (var i = 0; i < Components.Length; i++)
        {
            var component = Components[i];
            var componentProps = component.GetProperties(BindingFlags.Public | BindingFlags.Instance).Select(p => p.Name).ToImmutableArray();

            renderTreeBuilder.OpenComponent(i, component);
            foreach (var (key, value) in Attributes)
            {
                if (componentProps.Contains(key))
                {
                    renderTreeBuilder.AddAttribute(i, key, value);
                }
            }

            renderTreeBuilder.CloseComponent();
        }
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Components = FragmentMap.Get(Name).ToArray();
    }

}