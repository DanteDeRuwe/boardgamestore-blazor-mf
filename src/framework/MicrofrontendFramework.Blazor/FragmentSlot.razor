@using System.Collections.Immutable
@using System.Reflection
@using Microsoft.Extensions.Logging
@inject FragmentMap FragmentMap


@_renderFragment


@code {

    [Parameter] public string Name { get; set; }

    [Parameter] public Dictionary<string, object> Attributes { get; set; } = new();

    private RenderFragment? _renderFragment = null;

    protected override async Task OnInitializedAsync()
    {
        var components = FragmentMap.Get(Name).ToArray();

        _renderFragment = components.Length <= 0
            ? null
            : builder =>
            {
                for (var i = 0; i < components.Length; i++)
                {
                    var component = components[i];

                    var componentProps = component
                        .GetProperties(BindingFlags.Public | BindingFlags.Instance)
                        .Select(x => x.Name)
                        .ToImmutableHashSet();

                    builder.OpenComponent(i, component);

                    foreach (var attr in Attributes.Where(x => componentProps.Contains(x.Key)))
                    {
                        builder.AddAttribute(i, attr.Key, attr.Value);
                    }

                    builder.CloseComponent();
                }
            };

        await base.OnInitializedAsync();
    }

}